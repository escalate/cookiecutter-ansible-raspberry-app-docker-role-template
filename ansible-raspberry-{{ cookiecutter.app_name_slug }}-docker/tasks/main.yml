- name: Create application user
  ansible.builtin.user:
    name: {{ cookiecutter.app_name_slug }}
    uid: {{ cookiecutter.app_user_uid }}
    group: root
    create_home: false
    shell: /sbin/nologin

- name: Create config directory
  ansible.builtin.file:
    path: "{% raw %}{{{% endraw %} {{ cookiecutter.app_name_ansible_var }}_etc_path }}"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Create data directory
  ansible.builtin.file:
    path: "{% raw %}{{{% endraw %} {{ cookiecutter.app_name_ansible_var }}_data_path }}"
    state: directory
    owner: {{ cookiecutter.app_name_slug }}
    group: root
    mode: "0775"

{% if cookiecutter.app_backup_job | lower == "true" -%}
- name: Create backup directory
  ansible.builtin.file:
    path: "{% raw %}{{{% endraw %} {{ cookiecutter.app_name_ansible_var }}_backup_path }}"
    state: directory
    owner: {{ cookiecutter.app_name_slug }}
    group: root
    mode: "0775"

{% endif -%}
{% if cookiecutter.app_config_yaml | lower == "true" -%}
- name: Create service configuration
  ansible.builtin.template:
    src: {{ cookiecutter.app_name_slug }}.yml.j2
    dest: "{% raw %}{{{% endraw %} {{ cookiecutter.app_name_ansible_var }}_etc_path }}/{{ cookiecutter.app_name_slug }}.yml"
    owner: root
    group: root
    mode: "0644"
  no_log: true
  notify: Restart {{ cookiecutter.app_name_slug }} service

{% endif -%}
- name: Define environment variables
  ansible.builtin.template:
    src: {{ cookiecutter.app_name_slug }}.env.j2
    dest: /etc/{{ cookiecutter.app_name_slug }}.env
    owner: root
    group: root
    mode: "0644"
  notify: Restart {{ cookiecutter.app_name_slug }} service

- name: Define Docker container labels
  ansible.builtin.template:
    src: {{ cookiecutter.app_name_slug }}.label.j2
    dest: /etc/{{ cookiecutter.app_name_slug }}.label
    owner: root
    group: root
    mode: "0644"
  notify: Restart {{ cookiecutter.app_name_slug }} service

- name: Pull Docker image
  community.docker.docker_image:
    name: "{{ cookiecutter.app_docker_image }}:{% raw %}{{{% endraw %} {{ cookiecutter.app_name_ansible_var }}_docker_image_version }}"
    source: pull

- name: Create systemd service
  ansible.builtin.template:
    src: {{ cookiecutter.app_name_slug }}.service.j2
    dest: /etc/systemd/system/{{ cookiecutter.app_name_slug }}.service
    owner: root
    group: root
    mode: "0644"
  notify: Restart {{ cookiecutter.app_name_slug }} service

- name: Start service
  ansible.builtin.systemd:
    name: {{ cookiecutter.app_name_slug }}
    state: started
    daemon_reload: true
  register: {{ cookiecutter.app_name_ansible_var }}_service_started

- name: Enable service
  ansible.builtin.systemd:
    name: {{ cookiecutter.app_name_slug }}
    enabled: true
    daemon_reload: true

- name: Force all notified handlers to run at this point
  ansible.builtin.meta: flush_handlers

- name: Wait for service to become available
  ansible.builtin.uri:
    url: http://localhost:{{ cookiecutter.app_port }}/
  register: result
  until: result.status == 200
  retries: 60
  delay: 1
{%- if cookiecutter.app_backup_job | lower == "true" %}

- name: Create backup script
  ansible.builtin.template:
    src: backup-{{ cookiecutter.app_name_slug }}.sh.j2
    dest: /usr/local/bin/backup-{{ cookiecutter.app_name_slug }}.sh
    owner: root
    group: root
    mode: "0755"

- name: Create restore script
  ansible.builtin.template:
    src: restore-{{ cookiecutter.app_name_slug }}.sh.j2
    dest: /usr/local/bin/restore-{{ cookiecutter.app_name_slug }}.sh
    owner: root
    group: root
    mode: "0755"

- name: Add backup cron job
  ansible.builtin.cron:
    name: Backup {{ cookiecutter.app_name }}
    # TODO
    minute: "0"
    hour: "0"
    job: "/usr/local/bin/backup-{{ cookiecutter.app_name_slug }}.sh || echo \"ERROR: A problem occurred during backup of {{ cookiecutter.app_name }}. Please check the logfiles. journalctl -t backup-{{ cookiecutter.app_name_slug }}.sh\""  # noqa 204
    user: root
{%- endif -%}
